apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: ${NAMESPACE}
objects:
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    name: elasticsearch
    labels:
      compose: ${NAMESPACE}
      app: elasticsearch
  spec:
    replicas: 1
    selector:
      deploymentconfig: elasticsearch
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: elasticsearch
      spec:
        containers:
        - image: elasticsearch:2
          imagePullPolicy: IfNotPresent
          name: elasticsearch
          ports:
          - containerPort: 9300
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data/
            name: elasticdata1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        serviceAccount: ${NAMESPACE}
        serviceAccountName: ${NAMESPACE}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: elasticdata1
          persistentVolumeClaim:
            claimName: elasticdata
    test: false
    triggers:
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    name: gateway
    labels:
      compose: ${NAMESPACE}
      app: gateway
  spec:
    replicas: 1
    selector:
      deploymentconfig: gateway
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: gateway
      spec:
        containers:
        - env:
          - name: GRAVITEEIO_ELASTIC_HOST
            value: elasticsearch
          - name: GRAVITEEIO_MONGODB_HOST
            value: mongodb
          image: ${NAMESPACE}/gateway:${GRAVITEE_VERSION}
          imagePullPolicy: Always
          name: gateway
          ports:
          - containerPort: 8082
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        serviceAccount: ${NAMESPACE}
        serviceAccountName: ${NAMESPACE}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - gateway
        from:
          kind: ImageStreamTag
          name: 'gateway:${GRAVITEE_VERSION}'
          namespace: ${NAMESPACE}
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    name: managementapi
    labels:
      compose: ${NAMESPACE}
      app: managementapi
  spec:
    replicas: 1
    selector:
      deploymentconfig: managementapi
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: managementapi
      spec:
        containers:
        - env:
          - name: GRAVITEEIO_ELASTIC_HOST
            value: elasticsearch
          - name: GRAVITEEIO_MONGODB_HOST
            value: mongodb
          - name: GIO_MIN_MEM
            value: 128m
          - name: GIO_MAX_MEM
            value: 512m
          - name: GRAVITEEIO_PORTAL_URL
            value: http://managementui-${NAMESPACE}.${OPENSHIFT_SUFFIXE}
          image: management-api:${GRAVITEE_VERSION}
          imagePullPolicy: Always
          name: managementapi
          ports:
          - containerPort: 8083
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        serviceAccount: ${NAMESPACE}
        serviceAccountName: ${NAMESPACE}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - managementapi
        from:
          kind: ImageStreamTag
          name: 'management-api:${GRAVITEE_VERSION}'
          namespace: ${NAMESPACE}
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    name: managementui
    labels:
      compose: ${NAMESPACE}
      app: managementui
  spec:
    replicas: 1
    selector:
      deploymentconfig: managementui
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: managementui
      spec:
        containers:
        - env:
          - name: MGMT_API_URL
            value: http://managementapi-${NAMESPACE}.${OPENSHIFT_SUFFIXE}/management/
          image: management-ui:${GRAVITEE_VERSION}
          imagePullPolicy: Always
          name: managementui
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        serviceAccount: ${NAMESPACE}
        serviceAccountName: ${NAMESPACE}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - managementui
        from:
          kind: ImageStreamTag
          name: 'management-ui:${GRAVITEE_VERSION}'
          namespace: ${NAMESPACE}
      type: ImageChange
  status: {}
  kind: Service
  metadata:
    creationTimestamp: null
    name: elasticsearch
  spec:
    ports:
    - name: 9300-tcp
      port: 9300
      protocol: TCP
      targetPort: 9300
    selector:
      deploymentconfig: elasticsearch
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: gateway
  spec:
    ports:
    - name: 8082-tcp
      port: 8082
      protocol: TCP
      targetPort: 8082
    selector:
      deploymentconfig: gateway
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: managementapi
  spec:
    ports:
    - name: 8083-tcp
      port: 8083
      protocol: TCP
      targetPort: 8083
    selector:
      deploymentconfig: managementapi
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: managementui
  spec:
    ports:
    - name: 80-tcp
      port: 80
      protocol: TCP
      targetPort: 80
    selector:
      deploymentconfig: managementui
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
  kind: Service
  metadata:
    creationTimestamp: null
    name: mongodb
  spec:
    ports:
    - name: 27017-tcp
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      deploymentconfig: mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    name: gateway
  spec:
    host: gateway-${NAMESPACE}.${OPENSHIFT_SUFFIXE}
    port:
      targetPort: 8082-tcp
    to:
      kind: Service
      name: gateway
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    name: managementapi
  spec:
    host: managementapi-${NAMESPACE}.${OPENSHIFT_SUFFIXE}
    port:
      targetPort: 8083-tcp
    to:
      kind: Service
      name: managementapi
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    name: managementui
  spec:
    host: managementui-${NAMESPACE}.${OPENSHIFT_SUFFIXE}
    port:
      targetPort: 80-tcp
    to:
      kind: Service
      name: managementui
      weight: 100
    wildcardPolicy: None
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
    creationTimestamp: null
    name: elasticdata
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
    volumeName: pv0002
  status: {}
parameters:
  - name: NAMESPACE 
    description: Name of Project
    value: gravitee
    required: true 
  - name: GRAVITEE_VERSION 
    description: Verion of gravitee to deploy
    value: 1.10.4
    required: true 
  - name: OPENSHIFT_SUFFIXE
    description: Base of web access for openshift 
    value: 192.168.99.100.nip.io
    required: true
  - name: STORAGE_ELASTIC